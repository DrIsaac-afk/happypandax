{
	"version": 3,
	"file": "D:/Code/happypandax/webclient/happypanda/static/__javascript__/utils.mod.js",
	"sources": [
		"D:/Code/happypandax/webclient/happypanda/static/utils.py"
	],
	"sourcesContent": [
		"__pragma__('alias', 'S', '$')  # JQuery\n\nsyntax_highlight = __pragma__('js', '{}',\n                              \"\"\"\n    function syntax_highlight(json) {\n        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n        return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n            var cls = 'json-number';\n            if (/^\"/.test(match)) {\n                if (/:$/.test(match)) {\n                    cls = 'json-key';\n                } else {\n                    cls = 'json-string';\n                }\n            } else if (/true|false/.test(match)) {\n                cls = 'json-boolean';\n            } else if (/null/.test(match)) {\n                cls = 'json-null';\n            }\n            return '<span class=\"' + cls + '\">' + match + '</span>';\n        });\n    }\"\"\")\n\npoll_func = __pragma__('js', '{}',\n                       \"\"\"\n    function poll_func(fn, timeout, interval) {\n    var startTime = (new Date()).getTime();\n    interval = interval || 1000;\n    var canPoll = true;\n\n    (function p() {\n        canPoll = ((new Date).getTime() - startTime ) <= timeout;\n        if (!fn() && canPoll)  { // ensures the function exucutes\n            setTimeout(p, interval);\n        }\n    })();\n    }\"\"\")\n\nhtml_escape_table = {\n    \"&\": \"&amp;\",\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\",\n    \">\": \"&gt;\",\n    \"<\": \"&lt;\",\n}\n\n\ndef html_escape(text):\n    \"\"\"Produce entities within text.\"\"\"\n    return \"\".join(html_escape_table.get(c, c) for c in text)\n\n\ndef get_locale():\n    return window.navigator.userLanguage or window.navigator.language\n\n\nclass Grid:\n    __pragma__('kwargs')\n\n    def __init__(self, container_el, child_el, **kwargs):\n        self._grid = S(container_el)\n        self._options = {\n            'itemSelector': child_el,\n        }\n        self._options.update(kwargs)\n        self._grid.packery(self._options)\n    __pragma__('nokwargs')\n\n    def reload(self):\n        \"Reload all items in node\"\n        self._grid.packery('reloadItems')\n\n    def layout(self):\n        self._grid.packery()\n\n\nclass URLManipulator:\n\n    __pragma__('kwargs')\n\n    def __init__(self, url=None):\n        if url:\n            self.uri = URI(url)\n        else:\n            self.uri = URI()\n    __pragma__('nokwargs')\n\n    def path(self):\n        return self.uri.pathname()\n\n    def go(self, url):\n        \"Add state to History\"\n        history.pushState(null, null, url)\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AASA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}