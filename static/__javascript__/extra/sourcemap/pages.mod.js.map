{
	"version": 3,
	"file": "D:/Code/happypandax/webclient/happypanda/static/__javascript__/pages.mod.js",
	"sources": [
		"D:/Code/happypandax/webclient/happypanda/static/pages.py"
	],
	"sourcesContent": [
		"__pragma__('alias', 'S', '$')  # JQuery\n\nfrom client import client, Base, ServerMsg\nimport utils\nimport widget\n\n\nclass BasePage(Base):\n\n    def main(self):\n        moment.locale(utils.get_locale())\n\n    def config_save(name):\n        pass\n\n    def config_get(name):\n        pass\n\n\nclass ApiPage(Base):\n\n    def __init__(self, url=\"/apiview\"):\n        super().__init__(url)\n\n    @classmethod\n    def get_type(cls, s):\n\n        if s[0] in (\"'\", '\"') and s[len(s) - 1] in (\"'\", '\"'):\n            return s[1:-1]\n        elif s.lower() in ('none', 'null'):\n            return None\n        else:\n            try:\n                return int(s)\n            except ValueError:\n                return s\n\n    def call(self):\n        func_args = {}\n\n        def each_d(index, element):\n            lichildren = S(this).children()\n            key = lichildren.eq(0).find(\"input\").val()\n            value = lichildren.eq(1).find(\"input\").val()\n            if key and value:\n                value = value.strip()\n                if value.startswith('[') and value.endswith(']'):\n                    value = [\n                        self.get_type(x.strip()) for x in value.replace(\n                            '[', '').replace(\n                            ']', '').split(',') if x]\n\n                if isinstance(value, str):\n                    value = self.get_type(value)\n\n                func_args[key] = value\n\n        S(\"div#args > ul > li\").each(each_d)\n\n        f_dict = {\n            'fname': S(\"#fname\").val()\n        }\n\n        f_dict.update(func_args)\n\n        client.call(ServerMsg([f_dict], lambda msg: S(\n            \"pre#json-receive\").html(utils.syntax_highlight(JSON.stringify(msg, None, 4)))))\n\n        S(\"pre#json-send\").html(utils.syntax_highlight(JSON.stringify(client._last_msg['msg'], None, 4)))\n\n    def add_kwarg(self):\n        S(\"div#args > ul\").append(\n            \"\"\"\n            <li>\n            <div class='col-xs-6'>\n            <input type='text', placeholder='keyword' class='form-control'>\n            </div>\n            <div class='col-xs-6'>\n            <input type='text', placeholder='value' class='form-control'>\n            </div>\n            </li>\n            \"\"\")\n\n\nclass LibraryPage(Base):\n\n    def __init__(self, name=\"Library\", url=\"/library\"):\n        super().__init__(url)\n        self.name = name\n        self.items = {}  # id : item obj\n        self.artists = {}  # id : item obj\n        self.tags = {}  # ns : tag\n        self.gfilters = {}  # id : item obj\n        self.item_limit = 100\n        self._page_limit = 10\n        self._page_list = []\n        self.current_page = 1\n\n        self._properties = {\n            'search_query': '',\n            'view': 'Gallery',\n            'sort': 'Title',\n            'sort_order': 'Ascending',\n            'group': False,\n            'iscroll': False\n        }\n\n        self.grid = utils.Grid(\"#items\", \"#items .gallery\", gutter=20)\n\n    def context_nav(self, *args):\n        \"\"\"\n        Insert a breadcumb element\n        Pass tuples of (name, url)\n        \"\"\"\n\n        ctx_links = [{'name': x[0], 'url': x[1]} for x in args]\n\n        self.compile(\n            \"#context-nav-t\",\n            \"#item-main\",\n            prepend=True,\n            context_links=ctx_links)\n\n    def update_context(self):\n        return\n        self.context_nav(*self._context_link)\n\n    def add_context(self, name, url):\n        self._context_link.append((name, url))\n        self.update_context()\n\n    def reset_context(self):\n        self._context_link = [(self.name, self.url)]\n\n    def set_properties(self):\n        \"\"\n        S(\"#current-view\").text(self._properties['view'])\n\n    def get_property(self, p):\n        r = self._properties[p]\n        if p == 'view' and self._properties['group'] and r == 'Gallery':\n            r = 'Grouping'\n        return r\n\n    def main(self):\n        super().main()\n        self.fetch_gfilters()\n        self.show_pagination()\n\n    __pragma__('iconv')\n    __pragma__('kwargs')\n\n    def update_sidebar(self, lists=None, tags=None, artist_obj={}):\n        \"\"\n        if artist_obj is not None:\n            artist_data = []\n            for a in artist_obj:\n                artist_data.append(\n                    {'name': artist_obj[a]['name'], 'count': artist_obj[a]['count']})\n            self.compile(\n                \"#side-artists-t\",\n                \"#side-artists\",\n                side_artists=artist_data)\n    __pragma__('nokwargs')\n    __pragma__('noiconv')\n\n    def update_pagination(self, from_page=1):\n        \"\"\n        self.current_page = from_page\n\n        back_disabled = False\n        next_disabled = False\n\n        if from_page - 1 == 0:\n            back_disabled = True\n\n        if from_page == len(self._page_list):\n            next_disabled = True\n\n        half_limit = int(self._page_limit / 2)\n        l_index = from_page - half_limit\n        r_index = from_page + half_limit + 1\n        if r_index > len(self._page_list):\n            r_index = len(self._page_list)\n            l_index = len(self._page_list) - (self._page_limit + 1)\n\n        if l_index < 0:\n            l_index = 0\n            r_index = self._page_limit\n        current_pages = self._page_list[l_index:r_index]\n\n        pages = []\n\n        for n in current_pages:\n            pages.append({'number': n, 'active': n == from_page})\n\n        self.show_items(page=from_page)\n\n        self.compile(\"#item-pagination-t\", \".item-pagination\",\n                     pages=pages,\n                     back_button=not back_disabled,\n                     next_button=not next_disabled,\n                     back_number=from_page - 1,\n                     next_number=from_page + 1)\n\n    def show_pagination(self, data=None, error=None):\n        \"\"\n        if data is not None and not error:\n            pages = data['count'] / self.item_limit\n            if pages < 1:\n                pages = 1\n            # check if number is whole\n            if pages % 1 == 0:  # Note: will fail on very large numbers eg. 999999999999999999999\n                pages = int(pages)\n            else:\n                pages = int(pages) + 1\n            self._page_list = range(1, pages + 1)\n            self.update_pagination()\n        elif error:\n            pass\n        else:\n            client.call_func(\n                \"get_view_count\",\n                self.show_pagination,\n                item_type=self.get_property('view'),\n                search_query=self.get_property('search_query'))\n\n    def fetch_gfilters(self, data=None, error=None):\n        \"\"\n        if data is not None and not error:\n            lists_data = []\n            for gl in data:\n                self.gfilters[gl['id']] = gl\n                lists_data.append({'name': gl['name']})\n\n            self.compile(\n                \"#side-lists-t\",\n                \"#side-lists .list-group\",\n                append=True,\n                side_lists=lists_data)\n        elif error:\n            pass\n        else:\n            client.call_func(\"get_items\", self.fetch_gfilters, item_type='galleryfilter')\n\n    __pragma__('iconv')\n    __pragma__('tconv')\n    __pragma__('kwargs')\n\n    def show_items(self, data=None, error=None, page=None):\n        if not page:\n            page = self.current_page\n\n        if data is not None and not error:\n            self.set_properties()\n            self.artists.clear()\n            _view = self.get_property('view')\n            items = []\n            if _view == 'Gallery':\n                if not self._properties['iscroll']:\n                    self.items.clear()\n                    S(\"#items\").empty()\n                for g in data:\n                    g_obj = widget.Gallery('medium', g)\n                    self.items[g['id']] = g_obj\n\n                    items.append(g_obj)\n\n                    for a in g['artists']:\n                        a_id = a['id']\n                        if a_id in self.artists:\n                            self.artists[a_id]['count'] += 1\n                        else:\n                            self.artists[a_id] = a\n                            self.artists[a_id]['count'] = 1\n\n            self.update_sidebar(artist_obj=self.artists)\n            if items:\n                for i in items:\n                    i.compile(\"#items\", append=True)\n                    i.fetch_thumb()\n\n            if not items:\n                self.show_nothing(\"#items\")\n\n            self.grid.reload()\n            self.grid.layout()\n\n        elif error:\n            pass\n        else:\n            view = self.get_property('view')\n\n            client.call_func(\"library_view\", self.show_items,\n                             item_type=view,\n                             limit=self.item_limit,\n                             page=page - 1,\n                             search_query=self._properties['search_query']\n                             )\n    __pragma__('noiconv')\n    __pragma__('notconv')\n    __pragma__('nokwargs')\n\n    def set_property(self, p, v):\n        self._properties[p] = v\n        self.show_pagination()\n\n    def update_search_query(self):\n        sq = S(\"#search\").val()\n        self.log(\"search query: {}\".format(sq))\n        self._properties['search_query'] = sq\n        self.show_pagination()\n\n    def show_nothing(self, target_el):\n        \"\"\n        self.compile(\"#nothing-t\", target_el)\n\n\nclass InboxPage(BasePage):\n\n    def __init__(self, name=\"Inbox\", url=\"/inbox\"):\n        super().__init__(name, url)\n\n\nclass FavortiesPage(BasePage):\n\n    def __init__(self, name=\"Favorites\", url=\"/fav\"):\n        super().__init__(name, url)\n\n\nclass GalleryPage(Base):\n    def __init__(self):\n        super().__init__()\n        self.obj = None\n        self.g_id = self.url.path().split('/')[2]\n\n    def main(self):\n        super().main()\n        self.show_gallery()\n\n    def show_gallery(self, data=None, error=None):\n        \"\"\n        if data is not None and not error:\n            self.obj = widget.Gallery('page', data)\n            self.compile(\"#gallery-t\",\n                         \".breadcrumb\", after=True,\n                         thumb=\"/static/img/default.png\",\n                         title=self.obj.title(),\n                         artists=data['artists'],\n                         lang=\"test\",\n                         inbox=data[\"inbox\"],\n                         fav=data[\"fav\"],\n                         published=moment.unix(data['pub_date']).format(\"LL\"),\n                         updated=moment.unix(data['last_updated']).format(\"LLL\"),\n                         read=moment.unix(data['last_read']).format(\"LLL\"),\n                         added=moment.unix(data['timestamp']).format(\"LLL\"),\n                         rel_added=moment.unix(data['timestamp']).fromNow(),\n                         rel_updated=moment.unix(data['last_updated']).fromNow(),\n                         rel_read=moment.unix(data['last_read']).fromNow())\n            widget.Thumbnail(\"#profile\", \"big\", \"Gallery\", self.obj['id']).fetch_thumb()\n        elif error:\n            pass\n        else:\n            client.call_func(\"get_item\", self.show_gallery, item_type='Gallery', item_id=int(self.g_id))\n\n_pages = {}\n\n__pragma__('kwargs')\n\n\ndef init_page(p, cls, *args, **kwargs):\n    _pages[p] = cls(*args, **kwargs)\n    return _pages[p]\n__pragma__('nokwargs')\n\n\ndef get_page(p):\n    return _pages[p]\n\n\ndef init():\n    S('div[onload]').trigger('onload')\n\nS(document).ready(init)\n"
	],
	"mappings": "AAAA;AA+XA;AAAA;AA7XA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AAGA;AAGA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAAA;AAaA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AAAA;AAEA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAEA;AAEA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAKA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAKA;AACA;AAAA;AACA;AACA;AAAA;AAIA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AAAA;AAQA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAeA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}