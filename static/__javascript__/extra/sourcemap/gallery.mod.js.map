{
	"version": 3,
	"file": "D:/Code/happypandax/webclient/happypanda/static/__javascript__/gallery.mod.js",
	"sources": [
		"D:/Code/happypandax/webclient/happypanda/static/gallery.py"
	],
	"sourcesContent": [
		"__pragma__('alias', 'S', '$')  # JQuery\n\nfrom client import client, Base, Command\n\n\nclass Gallery(Base):\n\n    def __init__(self, gtype='medium', gallery_obj={}, url=''):\n        super().__init__(url)\n\n        self._gtype = gtype\n        self.obj = gallery_obj\n        self._node = None\n        self._thumbs = {\n            'Big': None,\n            'Medium': None,\n            'Small': None\n        }\n        self._thumbsize = None\n\n    __pragma__('tconv')\n\n    def title(self):\n        \"Returns title in preffered language\"\n\n        t = \"\"\n\n        if self.obj:\n            if self.obj['titles']:\n                t = self.obj['titles'][0]['name']\n\n        return t\n    __pragma__('notconv')\n\n    def titles(self):\n        \"Returns all titles\"\n        pass\n\n    __pragma__('tconv')\n    __pragma__('kwargs')\n    def _fetch_thumb(self, data=None, error=None, size='Big'):\n        if data is not None and not error:\n            cmd_id = data[str(self.obj['id'])]\n            cmd = Command(cmd_id)\n            self._thumbs[self._thumbsize] = cmd\n            cmd.set_callback(self._set_thumb)\n            cmd.poll_until_complete(1000)\n        elif error:\n            pass\n        else:\n            if self.obj:\n                self._thumbsize = size\n                client.call_func(\"get_cover\", self._fetch_thumb, item_ids=[self.obj['id']],\n                                 size=size, local=False, uri=True, item_type='Gallery')\n    __pragma__('notconv')\n    __pragma__('nokwargs')\n\n    __pragma__('tconv')\n\n    def _set_thumb(self, cmd):\n        val = cmd.get_value()\n        self._thumbs[self._thumbsize] = val\n\n        im = \"static/img/no-image.png\"\n        if val:\n            im = val['data']\n        if self._node:\n            self._node.find('img').attr('src', im)\n            self._node.find('.load').fadeOut(300)\n\n    __pragma__('notconv')\n\n    __pragma__('tconv')\n\n    def fetch_thumb(self):\n        if not self._gtype:\n            return\n\n        s = {\n            'medium': 'Medium',\n            'small': 'Small'\n        }\n\n        size = s[self._gtype]\n\n        if not self._thumbs[size]:\n            self._fetch_thumb(size=size)\n    __pragma__('notconv')\n\n    def link_node(self, selector=None):\n\n        if not selector and not self.obj:\n            return\n\n        if not selector:\n            selector = \"#g-{}-{}\".format(self._gtype, self.obj['id'])\n\n        self._node = S(selector)\n\n    def get(self):\n        g = {}\n        g['id'] = self.obj['id']\n\n        if self._gtype == 'medium':\n            g['title'] = self.title()\n            g['thumb'] = \"static/img/default.png\"\n\n        return g\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AAAA;AAEA;AAKA;AAEA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}