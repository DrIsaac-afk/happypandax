{
	"version": 3,
	"file": "D:/Code/happypandax/webclient/happypanda/static/__javascript__/widget.mod.js",
	"sources": [
		"D:/Code/happypandax/webclient/happypanda/static/widget.py"
	],
	"sourcesContent": [
		"__pragma__('alias', 'S', '$')  # JQuery\n\nfrom client import client, thumbclient, Base, Command\n\n\nclass Widget(Base):\n\n    def __init__(self, source_el):\n        super().__init__()\n        self._source_el = source_el\n        self.node = None\n\n    __pragma__('kwargs')\n\n    def compile(\n            self,\n            target_el,\n            after=None,\n            before=None,\n            append=None,\n            prepend=None,\n            **data):\n        \"\"\"\n        Compile widget into target element\n        Set after, before, append or prepend to True to specify where to insert html.\n        \"\"\"\n        self.node = super().compile(self._source_el, target_el,\n                                    after=after, before=before,\n                                    append=append, prepend=prepend,\n                                    **data)\n\n    __pragma__('nokwargs')\n\n    def get_node(self):\n\n        if not self.node:\n            self.node = S(self._source_el)\n\n        return self.node\n\n\nclass Thumbnail(Widget):\n\n    def __init__(self, source_el, size_type, item_type, id):\n        super().__init__(source_el)\n        self.thumbclient = thumbclient\n        self.item_type = item_type\n        self.size_type = size_type\n        self.id = id\n        self._thumbs = {\n            'Big': None,\n            'Medium': None,\n            'Small': None\n        }\n        self._thumbsize = None\n\n    __pragma__('tconv')\n    __pragma__('kwargs')\n\n    def _fetch_thumb(self, data=None, error=None, size='Big'):\n        if data is not None and not error:\n            cmd_id = data[str(self.id)]\n            cmd = Command(cmd_id)\n            self._thumbs[self._thumbsize] = cmd\n            cmd.set_callback(self._set_thumb_cmd)\n            cmd.poll_until_complete(500)\n        elif error:\n            pass\n        else:\n            print(\"getting\")\n            if self.id is not None:\n                self._thumbsize = size\n                self.thumbclient.call_func(\"get_image\", self._fetch_thumb, item_ids=[self.id],\n                                 size=size, local=False, uri=True, item_type=self.item_type)\n    __pragma__('notconv')\n    __pragma__('nokwargs')\n\n    __pragma__('tconv')\n\n    def _set_thumb_cmd(self, cmd):\n        val = cmd.get_value()\n        im = None\n        if val:\n            im = val['data']\n\n        self._thumbs[self._thumbsize] = val\n\n        if not im:\n            im = \"/static/img/no-image.png\"\n\n        self._set_thumb(im)\n    __pragma__('notconv')\n\n    def _set_thumb(self, im):\n        if self.get_node() and im:\n            self.node.find('img').attr('src', im)\n            self.node.find('.load').fadeOut(300)\n\n    __pragma__('tconv')\n\n    def fetch_thumb(self):\n        if not self.size_type:\n            return\n\n        s = {\n            'big': 'Big',\n            'medium': 'Medium',\n            'small': 'Small'\n        }\n\n        size = s[self.size_type]\n        if self._thumbs[size]:\n            self._set_thumb(self._thumbs[size])\n        else:\n            self._fetch_thumb(size=size)\n    __pragma__('notconv')\n\n\nclass Gallery(Thumbnail):\n\n    __pragma__('kwargs')\n\n    def __init__(self, gtype='medium', gallery_obj={}):\n        self.obj = gallery_obj\n        id = None\n        if 'id' in self.obj:\n            id = self.obj['id']\n        super().__init__(\"#gallery-\" + gtype + \"-t\", gtype, 'Gallery', id)\n        self._gtype = gtype\n    __pragma__('nokwargs')\n\n    __pragma__('tconv')\n\n    def title(self):\n        \"Returns title in preffered language\"\n        t = \"\"\n\n        if self.obj:\n            if self.obj['titles']:\n                t = self.obj['titles'][0]['name']\n\n        return t\n    __pragma__('notconv')\n\n    def titles(self):\n        \"Returns all titles\"\n        pass\n\n        return a\n\n    def get(self):\n        g = {}\n        g['id'] = self.obj['id']\n\n        if self._gtype == 'medium':\n            g['title'] = self.title()\n            g['thumb'] = \"static/img/default.png\"\n        return g\n\n    __pragma__('kwargs')\n\n    def compile(\n            self,\n            target_el,\n            after=None,\n            before=None,\n            append=None,\n            prepend=None):\n        \"\"\"\n        Compile widget into target element\n        Set after, before, append or prepend to True to specify where to insert html.\n        \"\"\"\n        return super().compile(target_el,\n                               after=after, before=before,\n                               append=append, prepend=prepend,\n                               **self.get())\n\n    __pragma__('nokwargs')\n"
	],
	"mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAKA;AAEA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAEA;AAMA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"
}